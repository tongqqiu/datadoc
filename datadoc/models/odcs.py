# generated by datamodel-codegen:
#   filename:  odcs-json-schema-latest.json
#   timestamp: 2025-05-10T14:07:27+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Annotated, Any

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Kind(Enum):
    """
    The kind of file this is. Valid value is `DataContract`.
    """

    DataContract = "DataContract"


class ApiVersion(Enum):
    """
    Version of the standard used to build data contract. Default value is v3.0.2.
    """

    v3_0_2 = "v3.0.2"
    v3_0_1 = "v3.0.1"
    v3_0_0 = "v3.0.0"
    v2_2_2 = "v2.2.2"
    v2_2_1 = "v2.2.1"
    v2_2_0 = "v2.2.0"


class Type(Enum):
    """
    Type of the server.
    """

    api = "api"
    athena = "athena"
    azure = "azure"
    bigquery = "bigquery"
    clickhouse = "clickhouse"
    databricks = "databricks"
    denodo = "denodo"
    dremio = "dremio"
    duckdb = "duckdb"
    glue = "glue"
    cloudsql = "cloudsql"
    db2 = "db2"
    informix = "informix"
    kafka = "kafka"
    kinesis = "kinesis"
    local = "local"
    mysql = "mysql"
    oracle = "oracle"
    postgresql = "postgresql"
    postgres = "postgres"
    presto = "presto"
    pubsub = "pubsub"
    redshift = "redshift"
    s3 = "s3"
    sftp = "sftp"
    snowflake = "snowflake"
    sqlserver = "sqlserver"
    synapse = "synapse"
    trino = "trino"
    vertica = "vertica"
    custom = "custom"


class ServerSource(RootModel[Any]):
    root: Any


class LogicalType(Enum):
    """
    The logical element data type.
    """

    object = "object"


class LogicalType1(Enum):
    """
    The logical element data type.
    """

    string = "string"
    date = "date"
    number = "number"
    integer = "integer"
    object = "object"
    array = "array"
    boolean = "boolean"


class SchemaProperty(BaseModel):
    pass


class SchemaItemProperty(BaseModel):
    properties: list[SchemaProperty] | None = None
    """
    A list of properties for the object.
    """


class Tags(RootModel[list[str]]):
    """
    A list of tags that may be assigned to the elements (object or property); the tags keyword may appear at any level. Tags may be used to better categorize an element. For example, `finance`, `sensitive`, `employee_record`.
    """

    root: Annotated[list[str], Field(examples=["finance", "sensitive", "employee_record"])]
    """
    A list of tags that may be assigned to the elements (object or property); the tags keyword may appear at any level. Tags may be used to better categorize an element. For example, `finance`, `sensitive`, `employee_record`.
    """


class Dimension(Enum):
    """
    The key performance indicator (KPI) or dimension for data quality.
    """

    accuracy = "accuracy"
    completeness = "completeness"
    conformity = "conformity"
    consistency = "consistency"
    coverage = "coverage"
    timeliness = "timeliness"
    uniqueness = "uniqueness"


class Type1(Enum):
    """
    The type of quality check. 'text' is human-readable text that describes the quality of the data. 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql' is an individual SQL query that returns a value that can be compared. 'custom' is quality attributes that are vendor-specific, such as Soda or Great Expectations.
    """

    text = "text"
    library = "library"
    sql = "sql"
    custom = "custom"


class DataQualityLibrary(BaseModel):
    rule: Annotated[str, Field(examples=["duplicateCount", "validValues", "rowCount"])]
    """
    Define a data quality check based on the predefined rules as per ODCS.
    """
    mustBe: Any | None = None
    """
    Must be equal to the value to be valid. When using numbers, it is equivalent to '='.
    """
    mustNotBe: Any | None = None
    """
    Must not be equal to the value to be valid. When using numbers, it is equivalent to '!='.
    """
    mustBeGreaterThan: float | None = None
    """
    Must be greater than the value to be valid. It is equivalent to '>'.
    """
    mustBeGreaterOrEqualTo: float | None = None
    """
    Must be greater than or equal to the value to be valid. It is equivalent to '>='.
    """
    mustBeLessThan: float | None = None
    """
    Must be less than the value to be valid. It is equivalent to '<'.
    """
    mustBeLessOrEqualTo: float | None = None
    """
    Must be less than or equal to the value to be valid. It is equivalent to '<='.
    """
    mustBeBetween: Annotated[list[float] | None, Field(None, max_length=2, min_length=2)]
    """
    Must be between the two numbers to be valid. Smallest number first in the array.
    """
    mustNotBeBetween: Annotated[list[float] | None, Field(None, max_length=2, min_length=2)]
    """
    Must not be between the two numbers to be valid. Smallest number first in the array.
    """


class DataQualitySql(BaseModel):
    query: Annotated[
        str,
        Field(examples=["SELECT COUNT(*) FROM ${table} WHERE ${column} IS NOT NULL"]),
    ]
    """
    Query string that adheres to the dialect of the provided server.
    """


class DataQualityCustom(BaseModel):
    engine: Annotated[str, Field(examples=["soda", "great-expectations", "monte-carlo", "dbt"])]
    """
    Name of the engine which executes the data quality checks.
    """
    implementation: str | dict[str, Any]


class AuthoritativeDefinition(BaseModel):
    url: str
    """
    URL to the authority.
    """
    type: Annotated[
        str,
        Field(
            examples=[
                "businessDefinition",
                "transformationImplementation",
                "videoTutorial",
                "tutorial",
                "implementation",
            ]
        ),
    ]
    """
    Type of definition for authority: v2.3 adds standard values: `businessDefinition`, `transformationImplementation`, `videoTutorial`, `tutorial`, and `implementation`.
    """


class AuthoritativeDefinitions(RootModel[list[AuthoritativeDefinition]]):
    """
    List of links to sources that provide more details on the dataset; examples would be a link to an external definition, a training video, a git repo, data catalog, or another tool. Authoritative definitions follow the same structure in the standard.
    """

    root: list[AuthoritativeDefinition]
    """
    List of links to sources that provide more details on the dataset; examples would be a link to an external definition, a training video, a git repo, data catalog, or another tool. Authoritative definitions follow the same structure in the standard.
    """


class SupportItem(BaseModel):
    channel: str
    """
    Channel name or identifier.
    """
    url: str
    """
    Access URL using normal [URL scheme](https://en.wikipedia.org/wiki/URL#Syntax) (https, mailto, etc.).
    """
    description: str | None = None
    """
    Description of the channel, free text.
    """
    tool: Annotated[
        str | None,
        Field(None, examples=["email", "slack", "teams", "discord", "ticket", "other"]),
    ]
    """
    Name of the tool, value can be `email`, `slack`, `teams`, `discord`, `ticket`, or `other`.
    """
    scope: Annotated[str | None, Field(None, examples=["interactive", "announcements", "issues"])]
    """
    Scope can be: `interactive`, `announcements`, `issues`.
    """
    invitationUrl: str | None = None
    """
    Some tools uses invitation URL for requesting or subscribing. Follows the [URL scheme](https://en.wikipedia.org/wiki/URL#Syntax).
    """


class Pricing(BaseModel):
    priceAmount: float | None = None
    """
    Subscription price per unit of measure in `priceUnit`.
    """
    priceCurrency: str | None = None
    """
    Currency of the subscription price in `price.priceAmount`.
    """
    priceUnit: str | None = None
    """
    The unit of measure for calculating cost. Examples megabyte, gigabyte.
    """


class Team(BaseModel):
    username: Annotated[str | None, Field(None, examples=["mail@example.com", "uid12345678"])]
    """
    The user's username or email.
    """
    name: Annotated[str | None, Field(None, examples=["Jane Doe"])]
    """
    The user's name.
    """
    description: str | None = None
    """
    The user's description.
    """
    role: str | None = None
    """
    The user's job role; Examples might be owner, data steward. There is no limit on the role.
    """
    dateIn: date | None = None
    """
    The date when the user joined the team.
    """
    dateOut: date | None = None
    """
    The date when the user ceased to be part of the team.
    """
    replacedByUsername: str | None = None
    """
    The username of the user who replaced the previous user.
    """


class AnyType(RootModel[str | float | int | bool | list | dict[str, Any] | None]):
    root: str | float | int | bool | list | dict[str, Any] | None


class AnyNonCollectionType(RootModel[str | float | int | bool | None]):
    root: str | float | int | bool | None


class Support(RootModel[list[SupportItem]]):
    """
    Top level for support channels.
    """

    root: list[SupportItem]
    """
    Top level for support channels.
    """


class ServiceLevelAgreementProperty(BaseModel):
    property: str
    """
    Specific property in SLA, check the periodic table. May requires units (more details to come).
    """
    value: str | float | int | bool | None = None
    """
    Agreement value. The label will change based on the property itself.
    """
    valueExt: AnyNonCollectionType | None = None
    """
    Extended agreement value. The label will change based on the property itself.
    """
    unit: str | None = None
    """
    **d**, day, days for days; **y**, yr, years for years, etc. Units use the ISO standard.
    """
    element: str | None = None
    """
    Element(s) to check on. Multiple elements should be extremely rare and, if so, separated by commas.
    """
    driver: Annotated[str | None, Field(None, examples=["regulatory", "analytics", "operational"])]
    """
    Describes the importance of the SLA from the list of: `regulatory`, `analytics`, or `operational`.
    """


class CustomProperty(BaseModel):
    property: str | None = None
    """
    The name of the key. Names should be in camel case–the same as if they were permanent properties in the contract.
    """
    value: AnyType | None = None
    """
    The value of the key.
    """


class DataQuality(BaseModel):
    authoritativeDefinitions: AuthoritativeDefinitions | None = None
    businessImpact: Annotated[str | None, Field(None, examples=["operational", "regulatory"])]
    """
    Consequences of the rule failure.
    """
    customProperties: list[CustomProperty] | None = None
    """
    Additional properties required for rule execution.
    """
    description: str | None = None
    """
    Describe the quality check to be completed.
    """
    dimension: Dimension | None = None
    """
    The key performance indicator (KPI) or dimension for data quality.
    """
    method: Annotated[str | None, Field(None, examples=["reconciliation"])]
    name: str | None = None
    """
    Name of the data quality check.
    """
    schedule: Annotated[str | None, Field(None, examples=["0 20 * * *"])]
    """
    Rule execution schedule details.
    """
    scheduler: Annotated[str | None, Field(None, examples=["cron"])]
    """
    The name or type of scheduler used to start the data quality check.
    """
    severity: Annotated[str | None, Field(None, examples=["info", "warning", "error"])]
    """
    The severance of the quality rule.
    """
    tags: Tags | None = None
    type: Type1 | None = "library"  # type: ignore
    """
    The type of quality check. 'text' is human-readable text that describes the quality of the data. 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql' is an individual SQL query that returns a value that can be compared. 'custom' is quality attributes that are vendor-specific, such as Soda or Great Expectations.
    """
    unit: Annotated[str | None, Field(None, examples=["rows", "percent"])]
    """
    Unit the rule is using, popular values are `rows` or `percent`, but any value is allowed.
    """


class DataQualityChecks(RootModel[list[DataQuality]]):
    """
    Data quality rules with all the relevant information for rule setup and execution.
    """

    root: list[DataQuality]
    """
    Data quality rules with all the relevant information for rule setup and execution.
    """


class CustomProperties(RootModel[list[CustomProperty]]):
    """
    A list of key/value pairs for custom properties.
    """

    root: list[CustomProperty]
    """
    A list of key/value pairs for custom properties.
    """


class Description(BaseModel):
    """
    High level description of the dataset.
    """

    usage: str | None = None
    """
    Intended usage of the dataset.
    """
    purpose: str | None = None
    """
    Purpose of the dataset.
    """
    limitations: str | None = None
    """
    Limitations of the dataset.
    """
    authoritativeDefinitions: AuthoritativeDefinitions | None = None
    customProperties: CustomProperties | None = None


class SchemaElement(BaseModel):
    name: str | None = None
    """
    Name of the element.
    """
    physicalType: Annotated[str | None, Field(None, examples=["table", "view", "topic", "file"])]
    """
    The physical element data type in the data source.
    """
    description: str | None = None
    """
    Description of the element.
    """
    businessName: str | None = None
    """
    The business name of the element.
    """
    authoritativeDefinitions: AuthoritativeDefinitions | None = None
    tags: Tags | None = None
    customProperties: CustomProperties | None = None


class SchemaObject(SchemaElement):
    logicalType: LogicalType | None = None
    """
    The logical element data type.
    """
    physicalName: Annotated[str | None, Field(None, examples=["table_1_2_0"])]
    """
    Physical name.
    """
    dataGranularityDescription: Annotated[str | None, Field(None, examples=["Aggregation by country"])]
    """
    Granular level of the data in the object.
    """
    properties: list[SchemaProperty] | None = None
    """
    A list of properties for the object.
    """
    quality: DataQualityChecks | None = None
    name: str
    """
    Name of the element.
    """


class SchemaBaseProperty(SchemaElement):
    primaryKey: bool | None = None
    """
    Boolean value specifying whether the element is primary or not. Default is false.
    """
    primaryKeyPosition: int | None = -1
    """
    If element is a primary key, the position of the primary key element. Starts from 1. Example of `account_id, name` being primary key columns, `account_id` has primaryKeyPosition 1 and `name` primaryKeyPosition 2. Default to -1.
    """
    logicalType: LogicalType1 | None = None
    """
    The logical element data type.
    """
    logicalTypeOptions: dict[str, Any] | None = None
    """
    Additional optional metadata to describe the logical type.
    """
    physicalType: str | None = None
    """
    The physical element data type in the data source. For example, VARCHAR(2), DOUBLE, INT.
    """
    physicalName: Annotated[str | None, Field(None, examples=["col_str_a"])]
    """
    Physical name.
    """
    required: bool | None = False
    """
    Indicates if the element may contain Null values; possible values are true and false. Default is false.
    """
    unique: bool | None = False
    """
    Indicates if the element contains unique values; possible values are true and false. Default is false.
    """
    partitioned: bool | None = False
    """
    Indicates if the element is partitioned; possible values are true and false.
    """
    partitionKeyPosition: int | None = -1
    """
    If element is used for partitioning, the position of the partition element. Starts from 1. Example of `country, year` being partition columns, `country` has partitionKeyPosition 1 and `year` partitionKeyPosition 2. Default to -1.
    """
    classification: Annotated[str | None, Field(None, examples=["confidential", "restricted", "public"])]
    """
    Can be anything, like confidential, restricted, and public to more advanced categorization. Some companies like PayPal, use data classification indicating the class of data in the element; expected values are 1, 2, 3, 4, or 5.
    """
    encryptedName: str | None = None
    """
    The element name within the dataset that contains the encrypted element value. For example, unencrypted element `email_address` might have an encryptedName of `email_address_encrypt`.
    """
    transformSourceObjects: list[str] | None = None
    """
    List of objects in the data source used in the transformation.
    """
    transformLogic: str | None = None
    """
    Logic used in the element transformation.
    """
    transformDescription: str | None = None
    """
    Describes the transform logic in very simple terms.
    """
    examples: list[AnyType] | None = None
    """
    List of sample element values.
    """
    criticalDataElement: bool | None = False
    """
    True or false indicator; If element is considered a critical data element (CDE) then true else false.
    """
    quality: DataQualityChecks | None = None


class Role(BaseModel):
    role: str
    """
    Name of the IAM role that provides access to the dataset.
    """
    description: str | None = None
    """
    Description of the IAM role and its permissions.
    """
    access: str | None = None
    """
    The type of access provided by the IAM role.
    """
    firstLevelApprovers: str | None = None
    """
    The name(s) of the first-level approver(s) of the role.
    """
    secondLevelApprovers: str | None = None
    """
    The name(s) of the second-level approver(s) of the role.
    """
    customProperties: CustomProperties | None = None


class Server(BaseModel):
    """
    Data source details of where data is physically stored.
    """

    server: str
    """
    Identifier of the server.
    """
    type: Type
    """
    Type of the server.
    """
    description: str | None = None
    """
    Description of the server.
    """
    environment: Annotated[str | None, Field(None, examples=["prod", "preprod", "dev", "uat"])]
    """
    Environment of the server.
    """
    roles: list[Role] | None = None
    """
    List of roles that have access to the server.
    """
    customProperties: CustomProperties | None = None


class OpenDataContractStandardODCS(BaseModel):
    """
    An open data contract specification to establish agreement between data producers and consumers.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    version: str
    """
    Current version of the data contract.
    """
    kind: Kind | None = "DataContract"  # type: ignore
    """
    The kind of file this is. Valid value is `DataContract`.
    """
    apiVersion: ApiVersion | None = "v3.0.2"  # type: ignore
    """
    Version of the standard used to build data contract. Default value is v3.0.2.
    """
    id: str
    """
    A unique identifier used to reduce the risk of dataset name collisions, such as a UUID.
    """
    name: str | None = None
    """
    Name of the data contract.
    """
    tenant: str | None = None
    """
    Indicates the property the data is primarily associated with. Value is case insensitive.
    """
    tags: Tags | None = None
    status: Annotated[str, Field(examples=["proposed", "draft", "active", "deprecated", "retired"])]
    """
    Current status of the dataset.
    """
    servers: list[Server] | None = None
    """
    List of servers where the datasets reside.
    """
    dataProduct: str | None = None
    """
    The name of the data product.
    """
    description: Description | None = None
    """
    High level description of the dataset.
    """
    domain: Annotated[
        str | None,
        Field(
            None,
            examples=[
                "imdb_ds_aggregate",
                "receiver_profile_out",
                "transaction_profile_out",
            ],
        ),
    ]
    """
    Name of the logical data domain.
    """
    schema_: Annotated[list[SchemaObject] | None, Field(None, alias="schema")]
    """
    A list of elements within the schema to be cataloged.
    """
    support: Support | None = None
    price: Pricing | None = None
    team: list[Team] | None = None
    roles: list[Role] | None = None
    """
    A list of roles that will provide user access to the dataset.
    """
    slaDefaultElement: str | None = None
    """
    Element (using the element path notation) to do the checks on.
    """
    slaProperties: list[ServiceLevelAgreementProperty] | None = None
    """
    A list of key/value pairs for SLA specific properties. There is no limit on the type of properties (more details to come).
    """
    authoritativeDefinitions: AuthoritativeDefinitions | None = None
    customProperties: CustomProperties | None = None
    contractCreatedTs: AwareDatetime | None = None
    """
    Timestamp in UTC of when the data contract was created.
    """
