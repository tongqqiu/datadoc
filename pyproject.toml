[project]
name = "cli-project"
version = "0.1.0"
description = "A modern command-line interface example"
authors = [
    {name = "Tony Qiu", email = "tongqing.qiu@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "typer>=0.9.0,<0.10.0",
    "rich>=13.7.0,<14.0.0"  # Typer's recommended for rich output
]

[project.scripts]
cli-project = "cli_project.cli:main"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
    {include = "cli_project"}
]

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.0"
mypy = "^1.9.0"
pre-commit = "^3.6.0"
watchfiles = "^0.21.0"
pytest = "^8.0.0"
pytest-cov = "^4.1.0"

[tool.ruff]
line-length = 88
target-version = "py311"

# Enable Pyflakes, pycodestyle, and isort
select = ["E", "F", "I", "UP"]
ignore = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.poetry.scripts]
cli-project = "cli_project.cli:main"
format = "poetry run ruff format ."
lint = "poetry run ruff check ."
lint-fix = "poetry run ruff check --fix ."
typecheck = "poetry run mypy ."

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --cov=cli_project --cov-report=term-missing"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["cli_project"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "raise ImportError",
]
